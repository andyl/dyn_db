#!/usr/bin/env elixir 

Mix.install([
  {:ecto, "~> 3.9"},
  {:ecto_sql, "~> 3.9"},
  {:ecto_sqlite3, "~> 0.9"},
])

defmodule DynDB.Repo do 
  use Ecto.Repo,
    adapter: Ecto.Adapters.SQLite3, 
    otp_app: :dyn_db
end

defmodule DynDB do

  def start_link(args) do 
    DynDB.Repo.start_link(args) 
  end

  def all(repo, sch) do 
    DynDB.Repo.put_dynamic_repo(repo) 
    DynDB.Repo.all(sch)
  end

  def insert!(repo, data) do 
    DynDB.Repo.put_dynamic_repo(repo) 
    DynDB.Repo.insert!(data)
  end

  def migrate(repo, klas) do 
    DynDB.Repo.put_dynamic_repo(repo) 
    Ecto.Migrator.run(DynDB.Repo, [{0, klas}], :up, all: true, dynamic_repo: repo)
  end

  def exec(repo, callback) do 
    DynDB.Repo.put_dynamic_repo(repo) 
    callback.() 
  end
end

defmodule Migration0 do
  use Ecto.Migration

  def change do
    create table("roster") do
      add(:name, :string)
      add(:city, :string)
      add(:age, :integer)
      timestamps(type: :utc_datetime_usec)
    end
  end
end

defmodule Roster do
  use Ecto.Schema

  schema "roster" do
    field(:name, :string)
    field(:city, :string)
    field(:age, :integer)
    timestamps(type: :utc_datetime_usec)
  end
end

defmodule Main do 
  def main do 
    System.cmd("rm", ["-f", "test1.db"])
    System.cmd("rm", ["-f", "test2.db"])

    {:ok, repo1} = DynDB.start_link(name: nil, database: "test1.db")
    {:ok, repo2} = DynDB.start_link(name: nil, database: "test2.db")

    DynDB.migrate(repo1, Migration0) 
    DynDB.migrate(repo2, Migration0) 

    DynDB.insert!(repo1, %Roster{name: "Alex", city: "NY", age: 22})
    DynDB.insert!(repo2, %Roster{name: "Serge", city: "LA", age: 44})

    DynDB.all(repo1, Roster) |> IO.inspect(label: "TEST1")
    DynDB.all(repo2, Roster) |> IO.inspect(label: "TEST2")
  end
end

Main.main()

